export const data = {
  data: [
    {
      id: 100,
      title: 'Структура проекта',
      content:
        `<p>Для «СТ ВЕБКИТ» разработана следующая структура проекта, хорошо зарекомендовавшая себя в различных проектах:</p>
<pre>
├── App.vue
├── main.js
├── api
│   ├── base.js                   # базовый слой для работы с сервером
│   ├── mock.js                   # базовый слой для работы с тестовыми данными
│   ├── mock-data
│   │   ├── contacts.js           # тестовые данные для модуля "Контакты"
│   │   └── ...                   # другие тестовые данные
│   ├── modules
│   │   ├── contacts.js           # модуль "Контакты"
│   │   └── ...                   # другие модули для работы с сервером
├── assets
│   └── ...                       # файлы стилей, скрипты, шрифты, изображения и др. файлы
├── components
│   ├── shared
│   │   ├── layout
│   │   │   ├── MainLayout.vue    # основной макет приложения
│   │   │   └── ...               # макеты приложения
│   │   └── ...                   # универсальные компоненты, используемые в других компонентах
│   └── ...                       # модули и страницы
├── helpers
│   └── ...                       # различные вспомогательные функции
├── router
│   └── index.js                  # список маршрутизации внутри приложения
└── store
    ├── index.js                  # базовый файл хранилища
    ├── mutation-types.js         # список констант мутаций
    └── modules
        ├── contacts.js           # модуль "Контакты"
        └── ...                   # другие модули с данными
</pre>`
    },
    {
      id: 101,
      title: 'Layouts',
      content:
        `<p>«СТ ВЕБКИТ» поддерживает макеты страниц. Их использование позволяет ускорить разработку однотипных страниц 
              и избегать ограничений при роутинге.</p>
            <p>Макеты следует хранить в директории <code>@/src/shared/layout</code>. Пример типового макета — это файл
              <code>MainLayout.vue</code> в указанной директории.</p>
            <p>Каждый файл макета должен содержить в себе тег <code>&#x3C;slot&#x3E;</code>, куда загружается контент 
              страницы. Макеты регистрируются в файле <code>main.js</code> аналогично обычным компонентам Vue.js. В 
              названиях макетов следует использовать слово «layout» (например, «inner-layout»), чтобы отличать их 
              от других типов компонентов системы.</p>
            <p>После создания нового макета и его регистрации в <code>main.js</code>, используйте его как обычный 
                html-тег в компонентах.</p>`
    },
    {
      id: 102,
      title: 'Vuex',
      content:
        `<p>«СТ ВЕБКИТ» для организации работы с данными в приложении использует <a href="https://vuex.vuejs.org/ru/" target="_blank">Vuex</a> - 
                один из базовых элементов экосистемы Vue.js.</p>            
            <p>По организации данных «СТ ВЕБКИТ» придерживается следующего принципа. В файле <code>@/store/index.js</code> 
                располагаются только корневые данные и действия. Остальные данные и действия делятся на модули согласно 
                их логической принадлежности (<code>contacts</code>, <code>user</code>) и подключаются как модули в файле 
                <code>@/store/index.js</code>.</p>
            <p>Следует помнить, что изменение данных происходит только через мутации (mutations). Мутации - это синхронные методы. 
              Для асинхронной работы используются действия (actions). Для удобной работы советуем имена мутаций 
              заменить константами и хранить их в файле <code>@/store/mutation-types.js</code>.</p>`
    },
    {
      id: 103,
      title: 'Backend',
      content:
        `<p>Для взаимодействия с сервером в «СТ ВЕБКИТ» используется популярная библиотека <a href="https://github.com/axios/axios" target="_blank">Axios</a>.</p>
          <p>Функционально методы поделены на три части:</p>
          <ul>
            <li>Базовый слой в файлах <code>@/api/base.js</code> и <code>@/api/mock.js</code>, которые организуют непосредственно запросы к серверу с авторизацией и обработку ошибок;</li>
            <li>Модули данных - по отдельному файлу на модуль, в которых происходит обработка данных и выполняется вся бизнес-логика;</li>
            <li>Тестовые данные - набор сгрупированных по модулям тестовых данных, служащих для первоначальной разработки и отладки приложения, не зависящие от состояния сервера.</li>
          </ul>
          <br>
          <h4>Настройка сервера</h4>
          <p>Адрес сервера настраивается в константе <code>url</code> в файле <code>@/api/base.js</code>. Каждый модуль индивидуально может менять режим работы - с реальными или тестовыми данными. Для переключения его режима работы служит константа <code>debug</code> в соответствующем модуле.</p>
          <p>Для настройки BPM Online необходимо проделать все действия, описанные в файле <a href="/static/Настройка облачного стенда.docx">Настройка облачного стенда.docx</a>.</p>
          <br>
          <h4>Дополнительная информация</h4>
          <p>Более подробное описание методов взаимодействия со шлюзом можно получить в документе <a href="/static/Описание API.docx">Описание API.docx</a>,
          а описание настройки процессов в BPM Online - в <a href="/static/Как в бизнес процессе сделать привязку к объекту, данные которого передают из API.docx">Как в бизнес процессе сделать привязку к объекту, данные которого передают из API.docx</a>.</p>
          <p>Информация об API BPM Online находится на <a href="https://academy.terrasoft.ru/documents/technic-sdk/7-12/integraciya-s-sistemoy-i-vneshniy-api" target="_blank">официальном сайте</a> этой CRM.</p>`
    }]
};
